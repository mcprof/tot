set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

Plugin 'ycm-core/YouCompleteMe.git'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line




set ffs=unix,dos
map <Space> <Leader>
set autoindent

let g:netrw_liststyle = 1
autocmd CursorHold,CursorHoldI * update
set clipboard=unnamed
" command Lightm :silent exec "!source ~/mintty-colors-solarized/sol.light" | redraw!
" command Darkm :silent exec "!source ~/mintty-colors-solarized/sol.dark" | redraw!
set t_Co=256
"set termguicolors
"colors solarized8
"colors zenburn
"syntax enable
"set background=dark
"colorscheme solarized

" Always show filename at bottom of screen, useful for Tmux splits
set laststatus=2
" set statusline+=%F "shows full filename at bottom of screen

"clear search highlighting with enter key: nnoremap <silent> <CR> :nohlsearch<CR><CR>
nnoremap <silent> <CR> :nohlsearch<CR><CR>

" set nocompatible "choose no compatibility with legacy vi, redundant with Vundle setup
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
" filetype plugin indent on       " load file type plugins + indentation / duplicate of what's in vundle setup

" Starting point of vimrc was https://mislav.net/2011/12/vim-revisited/
"" Whitespace
"set nowrap                      " don't wrap lines
" command! -nargs=* Wrap set wrap linebreak nolist " disabled with later line wrap, uncertain of the origin of this line
set tabstop=4 shiftwidth=4      " a tab is two spaces (or set this to 4)
set softtabstop=4
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode

" Set number of lines from the bottom that will be offset when scrolling
set scrolloff=5

" https://vim.fandom.com/wiki/Word_wrap_without_line_breaks
set wrap linebreak

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

inoremap jk <Esc>
inoremap kj <Esc>
inoremap jj <Esc>

set undofile                " Save undos after file closes
" set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" nnoremap ; :


"map <F4> :Goyo!<CR>:TogglePencil<CR>:colo seoul256<CR>
"augroup pencil
"  autocmd!
""  autocmd FileType markdown,mkd call pencil#init()
"  autocmd FileType markdown,mkd :PencilSoft
"  autocmd FileType markdown,mkd :colo seoul256 
"  autocmd FileType markdown,mkd :Goyo
"augroup END
"map <leader>f :Goyo <bar> highlight StatusLineNC ctermfg=white<CR>
"" https://github.com/junegunn/goyo.vim/issues/134https://github.com/junegunn/goyo.vim/issues/134
""https://github.com/junegunn/goyo.vim/issues/59
"" https://github.com/junegunn/goyo.vim/issues/71

" function! s:goyo_enter()
"   " if executable('tmux') && strlen($TMUX)
"   "   silent !tmux set status off
"   "   silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
"   " endif
"   set noshowmode
"   set noshowcmd
"   set scrolloff=999
"   " Limelight
"   " ...
"   colors seoul256
"   " https://vim.fandom.com/wiki/Automatic_word_wrapping
" endfunction

" function! s:goyo_leave()
"   " if executable('tmux') && strlen($TMUX)
"   "   silent !tmux set status on
"   "   silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
"   " endif
"   set showmode
"   set showcmd
"   set scrolloff=5
"   " Limelight!
"   " ...
"   colorscheme default
" endfunction

" autocmd! User GoyoEnter nested call <SID>goyo_enter()
" autocmd! User GoyoLeave nested call <SID>goyo_leave()


" Split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>w <C-w>v<C-w>l
noremap <silent> <c-_> :let @/ = ""<CR>

" Autosave when focus is lost (uncertain if functioning
au FocusLost * :wa
" Autosave on text change, from https://stackoverflow.com/questions/6991638/how-to-auto-save-a-file-every-1-second-in-vim
" autocmd TextChanged,TextChangedI * silent write


" au BufNewFile,BufRead *.py
"     \ set tabstop=4 |
"     \ set softtabstop=4 |
"     \ set shiftwidth=4 |
"     \ set textwidth=0 |
"     \ set expandtab |
"     \ set autoindent |
"     \ set wrap linebreak nolist |
"     \ set fileformat=unix

set number
set splitbelow
set splitright

"YouCompleteMe personalizations to popup window tooltip
nmap <leader>d <plug>(YCMHover)
let g:ycm_auto_hover=''


nnoremap <buffer> <F9> :w<cr>:exec '!python3' shellescape(@%, 1)<cr>

" " Bind F5 to save file if modified and execute python script in a buffer.
" nnoremap <silent> <F5> :call SaveAndExecutePython()<CR><C-w>k
" vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>

" function! SaveAndExecutePython()
"     " SOURCE [reusable window]: https://github.com/fatih/vim-go/blob/master/autoload/go/ui.vim

"     " save and reload current file
"     silent execute 'update | edit'

"     " get file path of current file
"     let s:current_buffer_file_path = expand("%")

"     let s:output_buffer_name = 'Python'
"     let s:output_buffer_filetype = 'output'

"     " reuse existing buffer window if it exists otherwise create a new one
"     if !exists("s:buf_nr") || !bufexists(s:buf_nr)
"         silent execute 'botright new ' . s:output_buffer_name
"         let s:buf_nr = bufnr('%')
"     elseif bufwinnr(s:buf_nr) == -1
"         silent execute 'botright new'
"         silent execute s:buf_nr . 'buffer'
"     elseif bufwinnr(s:buf_nr) != bufwinnr('%')
"         silent execute bufwinnr(s:buf_nr) . 'wincmd w'
"     endif

"     silent execute 'setlocal filetype=' . s:output_buffer_filetype
"     setlocal bufhidden=delete
"     setlocal buftype=nofile
"     setlocal noswapfile
"     setlocal nobuflisted
"     setlocal winfixheight
"     setlocal cursorline " make it easy to distinguish
"     setlocal nonumber
"     setlocal norelativenumber
"     setlocal showbreak=""

"     " clear the buffer
"     setlocal noreadonly
"     setlocal modifiable
"     %delete _

"     " add the console output
"     silent execute '.!python3 ' . shellescape(s:current_buffer_file_path, 1)

"     " resize window to content length
"     " Note: This is annoying because if you print a lot of lines then your code buffer is forced to a height of one line every time you run this function.
"     "       However without this line the buffer starts off as a default size and if you resize the buffer then it keeps that custom size after repeated runs of this function.
"     "       But if you close the output buffer then it returns to using the default size when its recreated
"     execute 'resize' . line('$')

"     " make the buffer non modifiable
"     setlocal readonly
"     setlocal nomodifiable
" endfunction

"autocmd BufWinLeave *.* mkviewautocmd BufWinEnter *.* silent loadview "preserves code folds across saving and re-opening, from https://www.freecodecamp.org/news/learn-linux-vim-basic-features-19134461ab85/?gi=98085b19ac53
"
"
"
" map <F12> :wa<CR> :exe !tmux send -t bottom '!!' C-m"
" map <F12> :wa<cr> <bar> :exe !tmux send -t bottom 'pwd' C-m"

"single-button make/compile by having bottom tmux pane repeat last given command '!tmux send -t bottom' for bottom pane 
map <silent> <F4> :wa<cr><bar>:silent exec "!tmux send -t right '\\!\\!' C-m"<cr><bar>:redraw!<cr>
imap <silent> <F4> <Esc>:wa<cr><bar>:silent exec "!tmux send -t right '\\!\\!' C-m"<cr><bar>:redraw!<cr>
map <silent> <F12> :wa<cr><bar>:silent exec "!tmux send -t bottom '\\!\\!' C-m"<cr><bar>:redraw!<cr>
" set <F4>=<C-v><F4> " to get F4 to trigger in insert mode too


" vimrc editing and reloading
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <leader>vr :source $MYVIMRC<cr>
map <leader>vimrc :tabe $MYVIMRC<cr>
autocmd bufwritepost .vimrc source $MYVIMRC

" " Writeroom script equivalent from https://web.archive.org/web/20131223015541/http://connermcd.com/blog/2011/10/12/using-vim-in-place-of-writeroom/
" " let g:writeroom = 0
" let g:transparency = &transparency;
" function! WriteRoom()
"    if has("gui_running")
"       if g:writeroom == 0
"          let g:writeroom = 1
"          set columns=80
"          set fullscreen
"          set linebreak
"          set nocursorline
"          set nolist
"          set nonumber
"          set noshowmode
"          set rulerformat=%{strftime('%b %e %I:%M %p')}
"          set transparency=0
"          hi NonText guifg=bg
"       else
"          let g:writeroom = 0
"          set cursorline
"          set list
"          set nofullscreen
"          set nolinebreak
"          set number
"          set rulerformat=
"          set showmode
"          let &transparency;=g:transparency
"          hi clear
"       endif
"    endif
" endfunction


" Adding paste in new line, adapted from https://stackoverflow.com/questions/1346737/how-to-paste-in-a-new-line-with-vim#1346747 default register is * on Mac now with system clipboard integrations
" This one may be a little better (strip the ending new-line before pasting)
:nmap <leader>p :call append(line('.'), substitute(@*, '\n$', '', ''))<CR>

"Goyo Settings:
"" Ensure :q to quit even when Goyo is active, https://github.com/junegunn/goyo.vim/wiki/Customization
    function! s:goyo_enter()
      " set noshowcmd " added personally
      let b:quitting = 0
      let b:quitting_bang = 0
      autocmd QuitPre <buffer> let b:quitting = 1
      cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
      " PencilSoft " initiates vim-pencil with soft line wrapping
    endfunction

    function! s:goyo_leave()
      " Quit Vim if this is the only remaining buffer
      colors default
      PencilOff " exits vim-pencil
      " set showcmd " added personally
      if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        if b:quitting_bang
          qa!
        else
          qa
        endif
      endif
    endfunction

    autocmd! User GoyoEnter call <SID>goyo_enter()
    autocmd! User GoyoLeave call <SID>goyo_leave()



"" Proper wordcount implementation, from https://cromwell-intl.com/open-source/vim-word-count.html, added callable Count() function
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Here begins my automated wordcount addition.
"" This combines several ideas from:
"" http://stackoverflow.com/questions/114431/fast-word-count-function-in-vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function Count()
    let g:word_count="<unknown>"
    function WordCount()
        return g:word_count
    endfunction
    function UpdateWordCount()
        let lnum = 1
        let n = 0
        while lnum <= line('$')
            let n = n + len(split(getline(lnum)))
            let lnum = lnum + 1
        endwhile
        let g:word_count = n
    endfunction
    " Update the count when cursor is idle in command or insert mode.
    " Update when idle for 1000 msec (default is 4000 msec).
    set updatetime=1000
    augroup WordCounter
        au! CursorHold,CursorHoldI * call UpdateWordCount()
    augroup END
    " Set statusline, shown here a piece at a time
    highlight User1 ctermbg=green guibg=green ctermfg=black guifg=black
    set statusline=%1*			" Switch to User1 color highlight
    set statusline+=%<%F			" file name, cut if needed at start
    set statusline+=%M			" modified flag
    set statusline+=%y			" file type
    set statusline+=%=			" separator from left to right justified
    set statusline+=\ %{WordCount()}\ words,
    set statusline+=\ %l/%L\ lines,\ %P	" percentage through the file
endfunction

" Text width and highlighting the column at the end of the width, from http://blog.ezyang.com/2010/03/vim-textwidth/
" Here are the configuration options you care about:
"     textwidth (or tw): controls the wrap width you would like to use. Use :set tw=72 to set the wrap width; by default it's unset and thus disables line-wrapping. If this value is set, you're entirely at the whimsy of the below formatoptions, which is often filetype sensitive.
"     formatoptions (or fo): controls whether or not automatic text wrapping is enabled, depending on whether or not the t flag is set. Toggle the flag on with :set fo+=t, and toggle it off with :set fo-=t. There are also a number of auxiliary format options, but they're not as important.
"     wrapmargin (or wm): controls when to wrap based on terminal size; I generally find using this to be a bad idea.
" Understanding the interaction between these two options is important. Here is a short table of interactions:
"     tw=0 fo=cq wm=0: No automatic wrapping, rewrapping will wrap to 80
"     tw=72 fo=cq wm=0: No automatic wrapping, rewrapping will wrap to 72
"     tw=0 fo=cqt wm=0: No automatic wrapping, rewrapping will wrap to 72
"     tw=0 fo=cqt wm=5: Automatic wrapping at a 5 col right margin
"     tw=72 fo=cqt wm=0: Automatic wrapping at col 72
" Notice that to get automatic wrapping you need both fo+=t as well as tw or wm to be nonzero. Note also that some filetype will automatically give you fo+=t, while others won't.
" Here are the keystrokes you care about:
"     gq: performs a "formatting operation", which in our universe means "rewrap the text." This will respect leading indent and symbolic characters, which is usually nice but a little obnoxious if you're reflowing a bullet point (since the text will suddenly acquire asterisks in front of everything).
"     The paragraph motions. The big one is vip (preceding v puts us in visual mode, for selection), which selects an "inner paragraph"; this means that if you're anywhere inside of a paragraph, you can type vip and have the entire thing instantly selected for you, possibly for you to run gq subsequently. vap is also equivalent, although it selects a whole paragraph and is more appropriate if you want to, say, delete it. The curly braces move you between paragraphs.
" set tw=0
" set fo=cq
" set wm=0
" set colorcolumn=+1

" from https://unix.stackexchange.com/questions/11987/vim-config-for-specific-filetypes#11988
" https://www.swamphogg.com/2015/vim-setup/
function! MarkdownPrefFunction()
   " Preferences here
    setlocal autoindent
    setlocal colorcolumn=0
    setlocal linebreak
    " setlocal nonumber
    setlocal shiftwidth=4
    setlocal spell spelllang=en_ca
    setlocal tabstop=4
    setlocal wrap
    PencilSoft
    " colors seoul256
    " colors murphy
    " Goyo
endfunction
autocmd Filetype markdown call MarkdownPrefFunction()

" from https://unix.stackexchange.com/questions/11987/vim-config-for-specific-filetypes#11988
" http://blog.ezyang.com/2010/03/vim-textwidth/
function! PythonPrefFunction()
   " Preferences here
    set tw=80
    set fo=cq
    set wm=0
    " set colorcolumn=+1
endfunction
autocmd Filetype python call PythonPrefFunction()

" from https://unix.stackexchange.com/questions/11987/vim-config-for-specific-filetypes#11988
" http://blog.ezyang.com/2010/03/vim-textwidth/
function! CPrefFunction()
   " Preferences here
    " set tw=80
    set fo=cq
    set wm=0
    set colorcolumn=+1
endfunction
autocmd Filetype c call CPrefFunction()


" ref:
" Find/Replace across every open buffer (may need '!' after bufdo?): bufdo %s/getNames/getName/g

" For MacVim so stop cursor blinking, from https://vi.stackexchange.com/questions/14541/no-cursor-blinking-doesnt-work
" set gcr+=a:blinkon0


" experimental cursor stuff to mirror MacVim changing shape per mode, from https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
"Mode Settings

let &t_SI.="\e[6 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode (ELSE)

"Cursor settings:

"  1 -> blinking block
"  2 -> solid block 
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
