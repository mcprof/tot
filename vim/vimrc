set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

Plugin 'ycm-core/YouCompleteMe.git'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line




set ffs=unix,dos
map <Space> <Leader>
set autoindent

let g:netrw_liststyle = 1
autocmd CursorHold,CursorHoldI * update
set clipboard=unnamed
" command Lightm :silent exec "!source ~/mintty-colors-solarized/sol.light" | redraw!
" command Darkm :silent exec "!source ~/mintty-colors-solarized/sol.dark" | redraw!
set t_Co=256
"set termguicolors
"colors solarized8
"colors zenburn
"syntax enable
"set background=dark
"colorscheme solarized

set statusline=%f "shows filename at bottom of screen at all times

nnoremap <silent> <CR> :nohlsearch<CR><CR>
"clear search highlighting with enter key: nnoremap <silent> <CR> :nohlsearch<CR><CR>

set nocompatible "choose no compatibility with legacy vi
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
filetype plugin indent on       " load file type plugins + indentation

"" Whitespace
"set nowrap                      " don't wrap lines
command! -nargs=* Wrap set wrap linebreak nolist
set tabstop=4 shiftwidth=4      " a tab is two spaces (or set this to 4)
set softtabstop=4
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

inoremap jk <Esc>
inoremap kj <Esc>
inoremap jj <Esc>

set undofile                " Save undos after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" nnoremap ; :


"map <F4> :Goyo!<CR>:TogglePencil<CR>:colo seoul256<CR>
"augroup pencil
"  autocmd!
""  autocmd FileType markdown,mkd call pencil#init()
"  autocmd FileType markdown,mkd :PencilSoft
"  autocmd FileType markdown,mkd :colo seoul256 
"  autocmd FileType markdown,mkd :Goyo
"augroup END
"map <leader>f :Goyo <bar> highlight StatusLineNC ctermfg=white<CR>
"" https://github.com/junegunn/goyo.vim/issues/134https://github.com/junegunn/goyo.vim/issues/134
""https://github.com/junegunn/goyo.vim/issues/59
"" https://github.com/junegunn/goyo.vim/issues/71

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>w <C-w>v<C-w>l
noremap <silent> <c-_> :let @/ = ""<CR>

au FocusLost * :wa
" au BufNewFile,BufRead *.py
"     \ set tabstop=4 |
"     \ set softtabstop=4 |
"     \ set shiftwidth=4 |
"     \ set textwidth=0 |
"     \ set expandtab |
"     \ set autoindent |
"     \ set wrap linebreak nolist |
"     \ set fileformat=unix

set number
set splitbelow
set splitright

"YouCompleteMe personalizations
nmap <leader>D <plug>(YCMHover)
let g:ycm_auto_hover=''

nnoremap <buffer> <F9> :w<cr>:exec '!python3' shellescape(@%, 1)<cr>

" " Bind F5 to save file if modified and execute python script in a buffer.
" nnoremap <silent> <F5> :call SaveAndExecutePython()<CR><C-w>k
" vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>

" function! SaveAndExecutePython()
"     " SOURCE [reusable window]: https://github.com/fatih/vim-go/blob/master/autoload/go/ui.vim

"     " save and reload current file
"     silent execute "update | edit"

"     " get file path of current file
"     let s:current_buffer_file_path = expand("%")

"     let s:output_buffer_name = "Python"
"     let s:output_buffer_filetype = "output"

"     " reuse existing buffer window if it exists otherwise create a new one
"     if !exists("s:buf_nr") || !bufexists(s:buf_nr)
"         silent execute 'botright new ' . s:output_buffer_name
"         let s:buf_nr = bufnr('%')
"     elseif bufwinnr(s:buf_nr) == -1
"         silent execute 'botright new'
"         silent execute s:buf_nr . 'buffer'
"     elseif bufwinnr(s:buf_nr) != bufwinnr('%')
"         silent execute bufwinnr(s:buf_nr) . 'wincmd w'
"     endif

"     silent execute "setlocal filetype=" . s:output_buffer_filetype
"     setlocal bufhidden=delete
"     setlocal buftype=nofile
"     setlocal noswapfile
"     setlocal nobuflisted
"     setlocal winfixheight
"     setlocal cursorline " make it easy to distinguish
"     setlocal nonumber
"     setlocal norelativenumber
"     setlocal showbreak=""

"     " clear the buffer
"     setlocal noreadonly
"     setlocal modifiable
"     %delete _

"     " add the console output
"     silent execute ".!python3 " . shellescape(s:current_buffer_file_path, 1)

"     " resize window to content length
"     " Note: This is annoying because if you print a lot of lines then your code buffer is forced to a height of one line every time you run this function.
"     "       However without this line the buffer starts off as a default size and if you resize the buffer then it keeps that custom size after repeated runs of this function.
"     "       But if you close the output buffer then it returns to using the default size when its recreated
"     execute 'resize' . line('$')

"     " make the buffer non modifiable
"     setlocal readonly
"     setlocal nomodifiable
" endfunction

"autocmd BufWinLeave *.* mkviewautocmd BufWinEnter *.* silent loadview "preserves code folds across saving and re-opening, from https://www.freecodecamp.org/news/learn-linux-vim-basic-features-19134461ab85/?gi=98085b19ac53
"
"
"
" map <F12> :wa<CR> :exe !tmux send -t bottom '!!' C-m"
" map <F12> :wa<cr> <bar> :exe !tmux send -t bottom 'pwd' C-m"

"single-button make/compile by having bottom tmux pane repeat last given command
map <silent> <F4> :wa<cr><bar>:silent exec "!tmux send -t bottom '\\!\\!' C-m"<cr><bar>:redraw!<cr>
map <silent> <F12> :wa<cr><bar>:silent exec "!tmux send -t bottom '\\!\\!' C-m"<cr><bar>:redraw!<cr>

" vimrc editing and reloading
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <leader>vr :source $MYVIMRC<cr>
map <leader>vimrc :tabe $MYVIMRC<cr>
autocmd bufwritepost .vimrc source $MYVIMRC

